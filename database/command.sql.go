// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: command.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCommand = `-- name: CreateCommand :execresult
INSERT INTO command (command, message, target, args) VALUES ($1, $2, $3, $4)
`

type CreateCommandParams struct {
	Command string
	Message string
	Target  string
	Args    []string
}

func (q *Queries) CreateCommand(ctx context.Context, arg CreateCommandParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createCommand,
		arg.Command,
		arg.Message,
		arg.Target,
		arg.Args,
	)
}

const getCommand = `-- name: GetCommand :many
SELECT id, command, message, target, args, created_at, updated_at FROM command
`

func (q *Queries) GetCommand(ctx context.Context) ([]Command, error) {
	rows, err := q.db.Query(ctx, getCommand)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.Command,
			&i.Message,
			&i.Target,
			&i.Args,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommandById = `-- name: GetCommandById :one
SELECT id, command, message, target, args, created_at, updated_at FROM command WHERE id = $1
`

func (q *Queries) GetCommandById(ctx context.Context, id pgtype.UUID) (Command, error) {
	row := q.db.QueryRow(ctx, getCommandById, id)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.Command,
		&i.Message,
		&i.Target,
		&i.Args,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
