// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schedule.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSchedule = `-- name: CreateSchedule :execresult
INSERT INTO schedule (episode, title, guest, description, running_time) VALUES ($1, $2, $3, $4, $5)
`

type CreateScheduleParams struct {
	Episode     int32
	Title       string
	Guest       []string
	Description string
	RunningTime pgtype.Timestamptz
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createSchedule,
		arg.Episode,
		arg.Title,
		arg.Guest,
		arg.Description,
		arg.RunningTime,
	)
}

const getSchedule = `-- name: GetSchedule :many
SELECT id, episode, title, guest, description, running_time, created_at, updated_at FROM schedule
`

func (q *Queries) GetSchedule(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.Query(ctx, getSchedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.Episode,
			&i.Title,
			&i.Guest,
			&i.Description,
			&i.RunningTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScheduleById = `-- name: GetScheduleById :one
SELECT id, episode, title, guest, description, running_time, created_at, updated_at FROM schedule WHERE id = $1
`

func (q *Queries) GetScheduleById(ctx context.Context, id pgtype.UUID) (Schedule, error) {
	row := q.db.QueryRow(ctx, getScheduleById, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Episode,
		&i.Title,
		&i.Guest,
		&i.Description,
		&i.RunningTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getScheduleToday = `-- name: GetScheduleToday :one
WITH previous_time AS (
    SELECT id, episode, title, guest, description, running_time, created_at, updated_at
    FROM schedule
    WHERE running_time BETWEEN NOW() - INTERVAL '1 hour 30 minutes' AND NOW()
    ORDER BY running_time DESC
    LIMIT 1
),
next_time AS (
    SELECT id, episode, title, guest, description, running_time, created_at, updated_at
    FROM schedule
    WHERE running_time > NOW()
    ORDER BY running_time ASC
    LIMIT 1
)
SELECT id, episode, title, guest, description, running_time, created_at, updated_at
FROM previous_time
UNION ALL
SELECT id, episode, title, guest, description, running_time, created_at, updated_at
FROM next_time
WHERE NOT EXISTS (SELECT 1 FROM previous_time)
LIMIT 1
`

type GetScheduleTodayRow struct {
	ID          pgtype.UUID
	Episode     int32
	Title       string
	Guest       []string
	Description string
	RunningTime pgtype.Timestamptz
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

func (q *Queries) GetScheduleToday(ctx context.Context) (GetScheduleTodayRow, error) {
	row := q.db.QueryRow(ctx, getScheduleToday)
	var i GetScheduleTodayRow
	err := row.Scan(
		&i.ID,
		&i.Episode,
		&i.Title,
		&i.Guest,
		&i.Description,
		&i.RunningTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
